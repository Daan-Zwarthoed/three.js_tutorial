import Head from "next/head";
import * as THREE from "three";
import Router from "next/router";
import React, { useContext, useEffect, useRef, useState } from "react";
import Scene from "../components/Scene";
import Resizable from "../components/global/Resizable";
import Prerequisites from "../components/tutorialSteps/Prerequisites";
import AppContext from "../contexts/AppContextProvider";
import Box, { boxSceneFunction } from "../components/tutorialSteps/Box";
import Renderer, {
  rendererSceneFunction,
} from "../components/tutorialSteps/Renderer";
import Loader, {
  loaderSceneFunction,
} from "../components/tutorialSteps/Loader";
import Raycaster, {
  raycasterSceneFunction,
} from "../components/tutorialSteps/Raycaster";
import CameraAnimation, {
  cameraAnimationSceneFunction,
} from "../components/tutorialSteps/CameraAnimation";
import InfoBubble, {
  infoBubbleSceneFunction,
} from "../components/tutorialSteps/InfoBubble";
import CameraAnimationOld, {
  cameraAnimationOldSceneFunction,
} from "../components/tutorialSteps/CameraAnimationOld";
import Light, { lightSceneFunction } from "../components/tutorialSteps/Light";
import Addons, {
  addonsSceneFunction,
} from "../components/tutorialSteps/Addons";
import ResizableCanvas from "../components/global/Resizable";
import Navigation from "../components/tutorialHelpers/Navigation";
type StepList = Array<{
  id: string;
  element: any;
  pageFunction?: any;
}>;
export const stepList: StepList = [
  {
    id: "prerequisites",
    element: <Prerequisites></Prerequisites>,
  },
  {
    id: "renderer",
    element: <Renderer></Renderer>,
    pageFunction: rendererSceneFunction,
  },
  {
    id: "box",
    element: <Box></Box>,
    pageFunction: boxSceneFunction,
  },
  {
    id: "addons",
    element: <Addons></Addons>,
    pageFunction: addonsSceneFunction,
  },
  {
    id: "light",
    element: <Light></Light>,
    pageFunction: lightSceneFunction,
  },
  {
    id: "loader",
    element: <Loader></Loader>,
    pageFunction: loaderSceneFunction,
  },
  {
    id: "raycaster",
    element: <Raycaster></Raycaster>,
    pageFunction: raycasterSceneFunction,
  },
  {
    id: "cameraAnimation",
    element: <CameraAnimation></CameraAnimation>,
    pageFunction: cameraAnimationSceneFunction,
  },
  {
    id: "cameraAnimationOld",
    element: <CameraAnimationOld></CameraAnimationOld>,
    pageFunction: cameraAnimationOldSceneFunction,
  },
  {
    id: "infoBubble",
    element: <InfoBubble></InfoBubble>,
    pageFunction: infoBubbleSceneFunction,
  },
];
const Tutorial = () => {
  const { userScript, setUserScript, tutorialStep, setTutorialStep } =
    useContext(AppContext);
  // const [stepIndex, setStepIndex] = useState<number>(-1);
  // const stepIndex = useRef<number>(-1);
  // let routerStepIndex = -1;

  useEffect(() => {
    const routerStepIndex = stepList.findIndex(
      (item) => item.id === Router.query.step
    );
    if (routerStepIndex !== tutorialStep) setTutorialStep(routerStepIndex);
  });
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="h-screen max-h-screen flex flex-row w-screen">
        <div
          id="ResizableCanvasNeighbour"
          className="flex flex-row w-full h-full"
        >
          {stepList[tutorialStep] && stepList[tutorialStep].element}
          {!stepList[tutorialStep] && (
            <div
              onClick={() => {
                Router.query.step = "box";
                Router.push(Router);
              }}
            >
              Go to box
            </div>
          )}
        </div>
        {stepList[tutorialStep] && stepList[tutorialStep].pageFunction && (
          <Scene threeScript={stepList[tutorialStep].pageFunction}></Scene>
        )}
        <Navigation></Navigation>
      </div>
    </>
  );
};

export default Tutorial;
