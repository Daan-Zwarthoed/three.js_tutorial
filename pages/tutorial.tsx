import Head from "next/head";
import * as THREE from "three";
import Router from "next/router";
import React, { useContext, useEffect, useRef, useState } from "react";
import Scene from "../components/Scene";
import Resizable from "../components/global/Resizable";
import Prerequisites from "../components/tutorialSteps/Prerequisites";
import AppContext from "../contexts/AppContextProvider";
import Box, { boxSceneFunction } from "../components/tutorialSteps/Box";
import Renderer, {
  rendererSceneFunction,
} from "../components/tutorialSteps/Renderer";
import Loader, {
  loaderSceneFunction,
} from "../components/tutorialSteps/Loader";
import Raycaster, {
  raycasterSceneFunction,
} from "../components/tutorialSteps/Raycaster";
import CameraAnimation, {
  cameraAnimationSceneFunction,
} from "../components/tutorialSteps/CameraAnimation";
import InfoBubble, {
  infoBubbleSceneFunction,
} from "../components/tutorialSteps/InfoBubble";
import Light, { lightSceneFunction } from "../components/tutorialSteps/Light";
import Addons, {
  addonsSceneFunction,
} from "../components/tutorialSteps/Addons";
import ResizableCanvas from "../components/global/Resizable";
import Navigation from "../components/tutorialHelpers/Navigation";
import { IconProp } from "@fortawesome/fontawesome-svg-core";
import * as FA from "@fortawesome/free-solid-svg-icons";

type StepList = Array<{
  id: string;
  element: any;
  icon: IconProp;
  pageFunction?: any;
}>;
export const stepList: StepList = [
  {
    id: "Prerequisites",
    element: <Prerequisites></Prerequisites>,
    icon: FA.faListAlt,
  },
  {
    id: "Renderer",
    element: <Renderer></Renderer>,
    icon: FA.faDesktop,
    pageFunction: rendererSceneFunction,
  },
  {
    id: "Box",
    element: <Box></Box>,
    icon: FA.faCube,
    pageFunction: boxSceneFunction,
  },
  {
    id: "Addons",
    element: <Addons></Addons>,
    icon: FA.faPuzzlePiece,
    pageFunction: addonsSceneFunction,
  },
  {
    id: "Light",
    element: <Light></Light>,
    icon: FA.faLightbulb,
    pageFunction: lightSceneFunction,
  },
  {
    id: "Loader",
    element: <Loader></Loader>,
    icon: FA.faDownload,
    pageFunction: loaderSceneFunction,
  },
  {
    id: "Raycaster",
    element: <Raycaster></Raycaster>,
    icon: FA.faArrowPointer,
    pageFunction: raycasterSceneFunction,
  },
  {
    id: "Camera animation",
    element: <CameraAnimation></CameraAnimation>,
    icon: FA.faCamera,
    pageFunction: cameraAnimationSceneFunction,
  },
  {
    id: "Info bubble",
    element: <InfoBubble></InfoBubble>,
    icon: FA.faFlagCheckered,
    pageFunction: infoBubbleSceneFunction,
  },
];
const Tutorial = () => {
  const { userScript, setUserScript, tutorialStep, setTutorialStep } =
    useContext(AppContext);
  // const [stepIndex, setStepIndex] = useState<number>(-1);
  // const stepIndex = useRef<number>(-1);
  // let routerStepIndex = -1;

  useEffect(() => {
    const routerStepIndex = stepList.findIndex(
      (item) => item.id === Router.query.step
    );
    if (routerStepIndex !== tutorialStep) setTutorialStep(routerStepIndex);
  });
  return (
    <>
      <Head>
        <title>
          Tutorial step: {stepList[tutorialStep] && stepList[tutorialStep].id}
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col h-screen max-h-screen w-screen">
        <div className="h-[95%] w-screen flex flex-row">
          <div className="flex flex-row w-full h-full">
            {stepList[tutorialStep] && stepList[tutorialStep].element}
            {!stepList[tutorialStep] && (
              <div
                onClick={() => {
                  Router.query.step = "box";
                  Router.push(Router);
                }}
              >
                Go to box
              </div>
            )}
          </div>
          {stepList[tutorialStep] && stepList[tutorialStep].pageFunction && (
            <Scene threeScript={stepList[tutorialStep].pageFunction}></Scene>
          )}
        </div>
        <Navigation></Navigation>
      </div>
    </>
  );
};

export default Tutorial;
