import Head from "next/head";
import Router from "next/router";
import React, { useContext, useEffect } from "react";
import Scene from "../components/scene/Scene";
import Prerequisites from "../components/tutorialSteps/Prerequisites";
import AppContext from "../contexts/AppContextProvider";
import Box, { boxSceneFunction } from "../components/tutorialSteps/Box";
import Renderer, {
  rendererSceneFunction,
} from "../components/tutorialSteps/Renderer";
import Loader, {
  loaderSceneFunction,
} from "../components/tutorialSteps/Loader";
import Raycaster, {
  raycasterSceneFunction,
} from "../components/tutorialSteps/Raycaster";
import CameraAnimation, {
  cameraAnimationSceneFunction,
} from "../components/tutorialSteps/CameraAnimation";
import InfoBubble, {
  infoBubbleSceneFunction,
} from "../components/tutorialSteps/InfoBubble";
import Light, { lightSceneFunction } from "../components/tutorialSteps/Light";
import Addons, {
  addonsSceneFunction,
} from "../components/tutorialSteps/Addons";
import Navigation from "../components/global/Navigation";
import * as FA from "@fortawesome/free-solid-svg-icons";
import Robot from "../components/robot/Robot";
import Finish from "../components/tutorialSteps/Finish";
import { getStepIndex } from "../helpers/getStep";

type StepList = Array<{
  id: string;
  element: React.ReactNode;
  icon: FA.IconDefinition;
  pageFunction?: Function;
}>;

export const stepList: StepList = [
  {
    id: "Prerequisites",
    element: <Prerequisites></Prerequisites>,
    icon: FA.faListAlt,
  },
  {
    id: "Renderer",
    element: <Renderer></Renderer>,
    icon: FA.faDesktop,
    pageFunction: rendererSceneFunction,
  },
  {
    id: "Box",
    element: <Box></Box>,
    icon: FA.faCube,
    pageFunction: boxSceneFunction,
  },
  {
    id: "Addons",
    element: <Addons></Addons>,
    icon: FA.faPuzzlePiece,
    pageFunction: addonsSceneFunction,
  },
  {
    id: "Light",
    element: <Light></Light>,
    icon: FA.faLightbulb,
    pageFunction: lightSceneFunction,
  },
  {
    id: "Loader",
    element: <Loader></Loader>,
    icon: FA.faDownload,
    pageFunction: loaderSceneFunction,
  },
  {
    id: "Raycaster",
    element: <Raycaster></Raycaster>,
    icon: FA.faArrowPointer,
    pageFunction: raycasterSceneFunction,
  },
  {
    id: "Camera animation",
    element: <CameraAnimation></CameraAnimation>,
    icon: FA.faCamera,
    pageFunction: cameraAnimationSceneFunction,
  },
  {
    id: "Info bubble",
    element: <InfoBubble></InfoBubble>,
    icon: FA.faInfo,
    pageFunction: infoBubbleSceneFunction,
  },
  {
    id: "Finish",
    element: <Finish></Finish>,
    icon: FA.faFlagCheckered,
  },
];

let initialLoad = true;

const Tutorial = () => {
  const { accessibleSteps, setShowRobot } = useContext(AppContext);
  const [tutorialStep, setTutorialStep] = React.useState<number>(-1);

  // If user goes to step they are not allowed send them back
  const startSetup = () => {
    if (initialLoad) return (initialLoad = false);
    if (
      Router.query.step &&
      accessibleSteps.length > 0 &&
      !accessibleSteps.includes(Router.query.step)
    ) {
      Router.query.step = accessibleSteps[accessibleSteps.length - 1];
      Router.push(Router);
    }
  };

  useEffect(() => {
    startSetup();

    const routerStepIndex = getStepIndex();
    if (routerStepIndex !== tutorialStep) setTutorialStep(routerStepIndex);
  });

  useEffect(() => {
    setShowRobot(null);
  }, [tutorialStep]);

  return (
    <>
      <Head>
        <title>
          Tutorial step: {stepList[tutorialStep] && stepList[tutorialStep].id}
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Robot></Robot>
      <div className="flex flex-col h-screen max-h-screen w-screen">
        <div className="h-[95%] w-screen flex flex-row">
          <div className="flex flex-row w-full h-full">
            {stepList[tutorialStep] && stepList[tutorialStep].element}
          </div>
          {stepList[tutorialStep] && stepList[tutorialStep].pageFunction && (
            <Scene
              threeScript={stepList[tutorialStep].pageFunction as Function}
            ></Scene>
          )}
        </div>
        <Navigation></Navigation>
      </div>
    </>
  );
};

export default Tutorial;
